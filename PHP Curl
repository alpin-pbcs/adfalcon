<?php
//AdFalcon URL that used to get ads
$adf_adFalconURL ="http://api.adfalcon.com/AdRequest/GetAd";
//this variable used to hold request's parameters
$adf_parameters ="";
/*
 * You must fill the following required parameters because 
 * adfalcon will not send ads without having those values
 */
$adf_siteId ="Site ID";
/*
* Ensure this is set to false once you release your web site to the public
*/
$adf_testMode =true;
/*
* Fill only in case specific ad sizes are required; otherwise remove this line of code, and AdFalcon will determine the best ad size for the device
*/
$adf_adUnitSize =1;

/*
* Unique User Identification:
* AdFalcon will need to uniquely identify each user, therefore if you have 
* a User unique ID for your web site users, then provide it here
* Otherwise, replies on AdFalcon to generate a unique ID for the which should be * save it in a persistent cookie/session with following properties
* - Cookie value: AdFalcon's UUID or any unique value for user
* - Expires : maximum as possible
* - Path : /
*/

/* 
* If you have your own user unique value, assign your value to userUniqueId variable
* note: remove all codes related to cookie when using your own user unique value
*/
$adf_userUniqueId ="";

/*
* this will get the user unique id generated by AdFalcon from the cookie in case this  was saved in a previous ad request 
*/
$adf_cookie_UUID =$_COOKIE["ADFALCON-UUID"];
if ($adf_cookie_UUID !="" and $userUniqueId =="")
{
    $adf_userUniqueId =$adf_cookie_UUID;
}

/*
 * You can help adfalcon to get better targeting ads by filling optional parameters, * these parameters are demographics and device information.
 * you will find name of parameters in AdFalcon Server API integration guide at appendix A
 */
$adf_optionalParams =array();
$adf_optionalParams["U_LN"] ="ar";
$adf_optionalParams["U_KW"] ="mobile, sport";
/*
 * Collects all needed information and builds URL for GET request
 */
$adf_parameters .="R_SID=" . $adf_siteId;
$adf_parameters .="&R_IP=" . rawurlencode($_SERVER['REMOTE_ADDR']);
$adf_parameters .="&R_F=XHTML";
$adf_parameters .="&R_V=api-all-1.0.0";
$adf_parameters .="&D_UA=" . rawurlencode($_SERVER['HTTP_USER_AGENT']);
//$adf_parameters .="&R_AS=" . $adf_adUnitSize;
$adf_parameters .="&R_TM=" . ($adf_testMode ? 'true' : 'false');
$adf_parameters .="&R_UUID=" . rawurlencode($adf_userUniqueId);
if ($adf_optionalParams !=null) 
{
    $adf_count =count($adf_optionalParams);
    foreach ($adf_optionalParams as $adf_key =>$adf_value) 
    {
        $adf_parameters .="&" . "" . rawurlencode($adf_key) . "=" . rawurlencode($adf_value);
    }
}
//get end user's browser header names and add them to the request parameters
$adf_ignore =array(
'HTTP_PRAGMA' =>'ignore', 'HTTP_CACHE_CONTROL' =>'ignore', 'HTTP_CONNECTION' =>'ignore', 'HTTP_USER_AGENT' =>'ignore', 'HTTP_COOKIE' =>'ignore'
);
foreach ($_SERVER as $adf_key =>$adf_val) 
{
    if (0 ===strpos($adf_key, 'HTTP_') &&!isset($adf_ignore[$adf_key]) &&isset($adf_val)) 
    {
        $adf_key =str_replace('HTTP_', '', $adf_key);
        $adf_parameters .="&" . "R_HH_" . rawurlencode(strtoupper($adf_key)) . "=" . rawurlencode($adf_val);
    }
}
//fill page query string
//$parameters .= (request.getQueryString() != null ? "&" + request.getQueryString() : "");
//create GET method URL
$adf_url_get =$adf_adFalconURL . "?" . $adf_parameters;
/*
 * Open http connection with adfalcon server and get new ad
 */
$adf_copt =array(
CURLOPT_URL =>$adf_url_get
, CURLOPT_RETURNTRANSFER =>true
, CURLOPT_HEADER =>true
, CURLOPT_HTTPPROXYTUNNEL =>true
, CURLOPT_CONNECTTIMEOUT =>20
, CURLOPT_TIMEOUT =>20
, CURLOPT_HTTPHEADER =>array('Content-Type: application/x-www-form-urlencoded')
);
$adf_ch =curl_init();
curl_setopt_array($adf_ch, $adf_copt);
$adf_response =curl_exec($adf_ch);
$adf_responseInfo =curl_getinfo($adf_ch);
curl_close($adf_ch);
echo $adf_responseInfo['CURLOPT_NOBODY'];
if ($adf_responseInfo['http_code'] ===200) 
{
    //check header values
     list($adf_header, $adf_body) =explode("\r\n\r\n", $adf_response, 2);
    $adf_status =strtok($adf_header, "\r\n");
    $adf_tok =strtok("\r\n");
    while ($adf_tok !==false) 
    {
        if (strpos($adf_tok, ":") >=0) 
        {
            list($adf_name, $adf_value) =explode(":", $adf_tok);
            if (strpos(trim($adf_name), "X-ADFALCON-UUID") !==false)
            {
                $adf_adfalcon_header_UUID =$adf_value;
            }else if (strpos(trim($adf_name), "X-ADFALCON-ERROR-CODE") !==false)
            {
                $adf_adfalcon_header_error_code =$adf_value;
            }else if (strpos(trim($adf_name), "X-ADFALCON-ERROR-MESSAGE") !==false)
            {
                $adf_adfalcon_header_error_message =$adf_value;
            }
        }
        $adf_tok =strtok("\n\r");
    }
    /*
 * in case a request was not completed successfully;
 * adfalcon will send two header's parameters
 * - X-ADFALCON-ERROR-CODE: status code of the request
 * - X-ADFALCON-ERROR-MESSAGE: message descripes the status code
 */
    if (isset($adf_adfalcon_header_error_code))
    {
        echo $adf_adfalcon_header_error_message;
    }else 
    {
        /*
 * Check if adfalcon sends UUID, * and save it in a presistent cookie/session.
 * 
 */
        if (isset($adf_adfalcon_header_UUID) &&strlen($adf_userUniqueId) >0) 
        {
            /*
 * save X-ADFALCON-UUID feild to end user's browser cookie
 */
            setcookie("ADFALCON-UUID",  $adf_adfalcon_header_UUID, time() +10 *365 *24 *60 *60 *3600, "/");
        }
        /*
 * If $adf_body variable is not null or empty, print it at page
 */
        if (null !==$adf_body)
        echo( $adf_body );
    }
}
?>
